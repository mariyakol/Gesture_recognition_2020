# -*- coding: utf-8 -*-
"""Program.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LNRJiwIgN9FqDWpFQ6NjbR7ktgH8O0d3
"""

import os
from google.colab import drive

drive.mount('/content/drive')

# Base data path on google drive
base_path  = "/content/drive/My Drive/"

print(os.listdir(base_path))

debug = True

from numpy import *
import cv2

def compute_and_write_of(video_path, output_path):
  if not os.path.exists(output_path):
    os.makedirs(output_path)
  output_image_path = output_path + "/of15.png"
  
  cap = cv2.VideoCapture(video_path)
  ret, frame1 = cap.read()
  
  i = 0
  while (frame1 is None):
    i += 1
    ret, frame1 = cap.read()
    if (i > 10):
      cap.release()
      cv2.destroyAllWindows()
      print("Error! Empty frames!")
      return
	
  #frame1 = cv2.resize(frame1, (64, 64))
  prvs = cv2.cvtColor(frame1, cv2.COLOR_BGR2GRAY)
  hsv = zeros_like(frame1)
  hsv[..., 1] = 255
  of_acc = None
	
  while(1):
    if (i % 10 == 0):
      print(i)
    i += 1
    ret, frame2 = cap.read()
    if frame2 is None:
      break
    #frame2 = cv2.resize(frame2, (64, 64))
    next = cv2.cvtColor(frame2, cv2.COLOR_BGR2GRAY)
    flow = cv2.calcOpticalFlowFarneback(prvs, next, None, 0.5, 3, 4, 3, 5, 1.2, 0)
    mag, ang = cv2.cartToPolar(flow[..., 0], flow[..., 1])
    hsv[..., 0] = ang * 180 / pi / 2
    hsv[..., 2] = cv2.normalize(mag, None, 0, 255, cv2.NORM_MINMAX)
    bgr = cv2.cvtColor(hsv, cv2.COLOR_HSV2BGR)
		
    if of_acc is None:
      of_acc = bgr
    else:
      of_acc += bgr
		
    prvs = next
  #of_acc = cv2.resize(of_acc, (64, 64))
  cv2.imwrite(output_image_path, of_acc)
  cap.release()
  cv2.destroyAllWindows()

def get_of_image(path):
  return cv2.imread(path)

input_video_path = base_path + "/1613.mp4"
of_path = base_path + "dataset/Augmentation/OF"

#compute_and_write_of(input_video_path, of_path)

import tensorflow as tf 

model_path = base_path + '/model.h5'
model = tf.keras.models.load_model(model_path)

model.summary()

from google.colab.patches import cv2_imshow

of_image_path = base_path + '/dataset/Optical_flow_full/WHO/ncslgr10r-028-04-dom-WHO.png'#'/new/Result_800/HOUSE/ali-013-09-dom-HOUSE_1.png'
image = get_of_image(of_image_path)
cv2_imshow(image)
image = cv2.resize(image, (64, 64))
print(image.shape)
image = image.reshape((1, 64, 64, 3))
image.shape

import numpy as np

labels = ['BOOK', 'BUY', 'NOT', 'IN', 'MOTHER', 'FINISH', 'LOOK', 'HOUSE', 'FUTURE', 'CAR', 'LIKE', 'READ', 'THAT', 'SEE', 'REALLY', 'WHO', 'J', 'V', 'Q']
print(labels)

predictions = model.predict(image)
print (predictions)

index = np.argmax(predictions)
print(index)

result = labels[index]
print(result)