# -*- coding: utf-8 -*-
"""Test_Augmentation

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UzWl-sbyilG0yjxNczCEM2Vh1absJVfS
"""

import os
from google.colab import drive

drive.mount('/content/drive')

# Base data path on google drive
base_path  = "/content/drive/My Drive/dataset/MORE_10"

print(os.listdir(base_path))

debug = True

# of_path = "/content/drive/My Drive/dataset/Optical_flow_full"
of_path = base_path + '/OF/'
result_path = base_path + '/OF_Augmentation'

import glob

def get_words(videos_directory):
  words = []
  words_paths = glob.glob(videos_directory + '/*')#'/videos_q')#
  for word_path in words_paths:
    words.append(word_path.split('/')[-1])
  
  return words

from numpy import expand_dims
from keras.preprocessing.image import load_img
from keras.preprocessing.image import img_to_array
from keras.preprocessing.image import ImageDataGenerator
import cv2
import math
from google.colab.patches import cv2_imshow

words = get_words(of_path)

for word in words:
  images_paths = glob.glob(of_path + '/' + word + '/*.png')
  print(images_paths)
  
  length = len(images_paths)
  number = math.ceil(800 / length)
  for image_path in images_paths:
    img = load_img(image_path)
    # convert to numpy array
    data = img_to_array(img)
    # expand dimension to one sample
    samples = expand_dims(data, 0)
    image_name = image_path.split('/')[-1].split('.')[0]
    # create image data augmentation generator
    datagen = ImageDataGenerator(width_shift_range=[-24, 24], height_shift_range=[-12, 12], rotation_range=5,
                                brightness_range=[0.5, 1], zoom_range=0.3, horizontal_flip=True) # Zoom 0.1
    # prepare iterator
    it = datagen.flow(samples, batch_size=1)
    
    result_directory_path = result_path + '/' + word
    result_image_path = result_directory_path + '/' + image_name + '_original.png'
    print(result_image_path)
    cv2.imwrite(result_image_path, data.astype('uint8'))
    for i in range(number - 1):
      # generate batch of images
      batch = it.next()
      # convert to unsigned integers for viewing 
      image = batch[0].astype('uint8')
      # cv2_imshow(image)
      #result_directory_path = result_path + '/' + word

      if not os.path.exists(result_directory_path):
        os.makedirs(result_directory_path)

      result_image_path = result_directory_path + '/' + image_name + '_' + str(i) + ".png"
      cv2.imwrite(result_image_path, image)
      print(result_image_path)
